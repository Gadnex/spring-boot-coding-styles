package net.binarypaper.springbootcodingstyles.person.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.annotation.JsonView;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import net.binarypaper.springbootcodingstyles.person.entity.Person;
import net.binarypaper.springbootcodingstyles.person.service.PersonService;

@RestController
@RequestMapping(path = "person", produces = { MediaType.APPLICATION_JSON_VALUE })
@CrossOrigin(origins = { "${application.cors.origins}" })
@Tag(name = "Person API", description = "Manage person database entities")
@RequiredArgsConstructor
public class PersonController {

    private final PersonService personService;

    @GetMapping
    @Operation(summary = "Get a list of all persons", description = "Get a list of all persons")
    @ApiResponses({ @ApiResponse(responseCode = "200", description = "List of all persons") })
    @JsonView(Person.Views.List.class)
    public List<Person> getAllPersons() {
        return personService.getAllPersons();
    }

    @GetMapping(path = "{id}")
    @Operation(summary = "Get a person by id", description = "Get a person by id")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Person returned"),
            @ApiResponse(responseCode = "404", description = "Invalid person id", content = @Content)
    })
    @JsonView(Person.Views.View.class)
    public Person getPersonById(
            @RequestParam @Parameter(description = "Id of the person to get", example = "1") Long id) {
        Optional<Person> person = personService.getPersonById(id);
        if (person.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Invalid id");
        }
        return person.get();
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "Create a new person", description = "Create a new person. The unique person id will be generated by the system.")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "The person was created"),
            @ApiResponse(responseCode = "400", description = "Invalid person details", content = @Content)
    })
    @JsonView(Person.Views.View.class)
    @Transactional
    public Person createPerson(
            @RequestBody @Parameter(description = "The person to create") @Validated(Person.Views.Create.class) @JsonView(Person.Views.Create.class) Person person) {
        return personService.createPerson(person);
    }
}